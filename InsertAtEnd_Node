#include <iostream>

class Node {
public:
    int data;
    Node* next;
    Node() : data(0), next(nullptr) {}
    Node(int x) : data(x), next(nullptr) {}
    Node(int x, Node* next) : data(x), next(next) {}
};

Node* insertEnd(Node* head, int k) {
    if (head == nullptr) {
        // If the list is empty, create a new node and return it as the head
        head = new Node(k);
        return head;
    }
    
    Node* endval = new Node(k);
    Node* temp = head;
    
    while (temp->next != nullptr) {
        temp = temp->next;
    }
    
    // Link the new node to the end of the list
    temp->next = endval;
    
    return head;
}

void printList(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        std::cout << temp->data << " ";
        temp = temp->next;
    }
    std::cout << std::endl;
}

int main() {
    // Creating an empty linked list
    Node* head = nullptr;

    // Inserting elements at the end of the linked list
    head = insertEnd(head, 1);
    head = insertEnd(head, 2);
    head = insertEnd(head, 3);

    // Printing the linked list
    std::cout << "Linked list: ";
    printList(head);

    return 0;
}
