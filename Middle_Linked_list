#include <iostream>
#include <vector>

using namespace std;

// Definition of Node class
class Node {
public:
    int data;
    Node* next;
    Node() : data(0), next(nullptr) {}
    Node(int x) : data(x), next(nullptr) {}
    Node(int x, Node* next) : data(x), next(next) {}
};

// Function to construct a linked list from a vector
Node* constructLL(vector<int>& arr) {
    if (arr.empty()) // Check if the vector is empty
        return nullptr;

    Node* head = new Node(arr[0]); // Create the head node with the first element
    Node* current = head; // Pointer to keep track of the current node

    // Iterate through the vector starting from the second element
    for (size_t i = 1; i < arr.size(); ++i) {
        // Create a new node with the current integer
        Node* newNode = new Node(arr[i]);
        // Link the current node to the new node
        current->next = newNode;
        // Move the current pointer to the newly created node
        current = newNode;
    }

    return head; // Return the head of the linked list
}

// Function to find the middle node of a linked list
Node* findMiddle(Node* head) {
    if (head == nullptr) // Check if the list is empty
        return nullptr;

    Node* slow = head; // Pointer to traverse the list one node at a time
    Node* fast = head; // Pointer to traverse the list two nodes at a time

    // Move 'fast' pointer two steps ahead and 'slow' pointer one step ahead
    // When 'fast' reaches the end, 'slow' will be at the middle
    while (fast != nullptr && fast->next != nullptr) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow; // 'slow' is now at the middle of the list
}

int main() {
    // Example usage
    vector<int> arr = {1, 2, 3, 4, 5};
    Node* head = constructLL(arr);
    
    // Find the middle node
    Node* middle = findMiddle(head);
    if (middle != nullptr)
        cout << "Middle node: " << middle->data << endl;
    else
        cout << "List is empty!" << endl;

    // Free memory by deleting all nodes
    Node* temp;
    while (head != nullptr) {
        temp = head;
        head = head->next;
        delete temp;
    }

    return 0;
}
