#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;

int longestSubarrayWithSumK(vector<int> a, long long k) {
    int n = a.size();
    unordered_map<long long, int> prefixSumIndex;
    int maxLength = 0;
    long long prefixSum = 0;

    for (int i = 0; i < n; i++) {
        prefixSum += a[i];

        if (prefixSum == k) {
            maxLength = i + 1;
        } else if (prefixSumIndex.find(prefixSum - k) != prefixSumIndex.end()) {
            maxLength = max(maxLength, i - prefixSumIndex[prefixSum - k]);
        }

        if (prefixSumIndex.find(prefixSum) == prefixSumIndex.end()) {
            prefixSumIndex[prefixSum] = i;
        }
    }

    return maxLength;
}

int main() {
    vector<int> arr = {3, 4, 7, 2, -3, 1, 4, 2};
    long long k = 7;

    int result = longestSubarrayWithSumK(arr, k);

    cout << "Length of the longest subarray with sum " << k << ": " << result << endl;

    return 0;
}
