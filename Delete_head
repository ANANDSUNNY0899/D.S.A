// Node class definition
class Node {
public:
    int data;
    Node* next;
    // Constructor with both data and next pointer
    Node(int data1, Node* next1) {
        data = data1;
        next = next1;
    }
    // Constructor with only data (next pointer set to nullptr)
    Node(int data1) {
        data = data1;
        next = nullptr;
    }
};
// Function to print the linked list
void printLL(Node* head) {
    while (head != NULL) {
        cout << head->data << " ";
        head = head->next;
    }
}
// Function to remove the head of the linked list
Node* removesHead(Node* head) {
    // Check if the linked list is empty
    if (head == NULL)
        return head;
    // Create a temporary pointer to the current head
    Node* temp = head;
    // Move the head to the next node
    head = head->next;
    // Delete the original head
    delete temp;
    // Return the updated head of the linked list
    return head;
}
int main() {
    // Initialize a vector with integer values
    vector<int> arr = {12, 5, 8, 7};
    // Create the linked list with nodes initialized with vector values
    Node* head = new Node(arr[0]);
    head->next = new Node(arr[1]);
    head->next->next = new Node(arr[2]);
    head->next->next->next = new Node(arr[3]);
    // Remove the head of the linked list
    head = removesHead(head);
    // Print the modified linked list
    printLL(head);    
    return 0;
}
Output: 5 8 7

Time Complexity: O(1) for updating the head of the linked list.

Space Complexity: O(1), as we have not used any extra space.
