#include <iostream>

struct Node {
    int data;
    Node* prev;
    Node* next;
    
    Node(int val) : data(val), prev(nullptr), next(nullptr) {}
};

Node* insertAtFront(Node* head, int k) {
    // Create a new node with value k
    Node* newNode = new Node(k);
    
    // If the list is empty, newNode becomes the head
    if (head == nullptr) {
        head = newNode;
    } else {
        // Set newNode's next to the current head
        newNode->next = head;
        // Set the current head's prev to newNode
        head->prev = newNode;
        // Update head to newNode
        head = newNode;
    }
    
    return head;
}

// Function to print the doubly linked list
void printList(Node* head) {
    while (head != nullptr) {
        std::cout << head->data << " ";
        head = head->next;
    }
    std::cout << std::endl;
}

// Function to delete all nodes in the doubly linked list
void deleteList(Node* head) {
    while (head != nullptr) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }
}

int main() {
    Node* head = nullptr;
    
    // Insert some nodes at the front of the list
    head = insertAtFront(head, 3);
    head = insertAtFront(head, 2);
    head = insertAtFront(head, 1);
    
    // Print the list
    std::cout << "Doubly Linked List: ";
    printList(head);
    
    // Cleanup: Delete all nodes
    deleteList(head);
    
    return 0;
}
