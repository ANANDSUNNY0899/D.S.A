Optimal approch---------->
Complexity:-->
time-complexity: Bigo(n)
space complexity:-o(1)

SOLUTION:-------->

#include <iostream>
#include <vector>
#include <climits>
using namespace std;

long long maxSubarraySum(vector<int> arr, int n)
{
    long long sum = 0;
    long long maxi = arr[0]; // Initialize maxi with the first element
    for (int i = 0; i < n; i++)
    {
        sum += arr[i];
        if (sum > maxi)
        {
            maxi = sum;
        }
        if (sum < 0)
        {
            sum = 0;
        }
    }
    return maxi;
}

int main()
{
    // Example usage
    vector<int> arr = {-2, -3, 4, -1, -2, 1, 5, -3};
    int n = arr.size();

    long long result = maxSubarraySum(arr, n);

    cout << "Maximum Subarray Sum: " << result << endl;

    return 0;
}
